// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// model User {
//   id String @id @default(uuid())
//   name String
// }

model AcademicSeemestar {
  id         String    @id @default(uuid())
  year       Int
  title      String
  code       String
  startMonth String
  endMonth   String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  student    Student[]

  @@map("academic-semestart")
}

model AcademicFaculty {
  id                 String               @id @default(uuid())
  title              String
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  academicDepartment AcademicDepartment[]
  students           Student[]
  faculties          Faculty[]

  @@map("academic-facullty")
}

model AcademicDepartment {
  id               String          @id @default(uuid())
  title            String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  academicFacultId String
  academicFaculty  AcademicFaculty @relation(fields: [academicFacultId], references: [id])
  students         Student[]
  faculties        Faculty[]

  @@map("academic-department")
}

model Student {
  id                   String             @id @default(uuid())
  studentID            String
  firstName            String
  lastName             String
  middleName           String
  profileImage         String
  email                String
  contactNo            String
  gendar               String
  bloodGroup           String
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  academicSemestarId   String
  academicSemestar     AcademicSeemestar  @relation(fields: [academicSemestarId], references: [id])
  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("students")
}

model Faculty {
  id           String @id @default(uuid())
  facultyID    String
  firstName    String
  lastName     String
  middleName   String
  profileImage String
  email        String
  contactNo    String
  gendar       String
  bloodGroup   String
  designation  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  academicDepartmentId String
  academicDepartment   AcademicDepartment @relation(fields: [academicDepartmentId], references: [id])
  academicFacultyId    String
  academicFaculty      AcademicFaculty    @relation(fields: [academicFacultyId], references: [id])

  @@map("faculties")
}
